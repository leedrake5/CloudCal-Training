merge.list <- pbapply::pblapply(index, function(x) merge_spectra(ftir.data=subset(ftir.table, Spectrum==fileframe[x,2]), xrf.data=subset(xrf.table, Spectrum=fileframe[x,1]), energy.range=c(0,1)))
head(merge.list[[1]])
merged.spectra <- merge.list[[1]]
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
library(ggplot2)
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
head(fileframe)
fileframe <- data.frame(XRFData=unique(xrf.cal[["Spectra"]]["Spectrum"])[2:121,], FTIRData=unique(ftir.cal[["Spectra"]]["Spectrum"]), stringsAsFactors = FALSE)#
fileframe[,] <- lapply(fileframe, function(x) type.convert(as.character(x), as.is = TRUE))
head(fileframe)
rownames(fileframe) <- NULL
head(fileframe)
fileframe <- data.frame(XRFData=unique(xrf.cal[["Spectra"]]["Spectrum"])[2:121,], FTIRData=unique(ftir.cal[["Spectra"]]["Spectrum"]), stringsAsFactors = FALSE)
head(fileframe)
fileframe <- data.frame(XRFData=unique(xrf.cal[["Spectra"]]["Spectrum"])[2:121,], FTIRData=unique(ftir.cal[["Spectra"]]["Spectrum"]))
head(fileframe)
fileframe <- data.frame(XRFData=unique(xrf.cal[["Spectra"]]["Spectrum"][2:121,]), FTIRData=unique(ftir.cal[["Spectra"]]["Spectrum"]))
head(fileframe)
fileframe <- data.frame(XRFData=unique(xrf.cal[["Spectra"]]["Spectrum"][2:121,]), FTIRData=unique(ftir.cal[["Spectra"]]["Spectrum"]))#
fileframe[,] <- lapply(fileframe, function(x) type.convert(as.character(x), as.is = TRUE))#
colnames(fileframe) <- c("XRFData", "FTIRData")#
rownames(fileframe) <- NULL
head(fileframe)
index <- seq(1, length(fileframe[,1]), 1)#
#
merge.list <- pbapply::pblapply(index, function(x) merge_spectra(ftir.data=subset(ftir.table, Spectrum==fileframe[x,2]), xrf.data=subset(xrf.table, Spectrum=fileframe[x,1]), energy.range=c(0,1)))
merged.spectra <- merge.list[[1]]
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
head(xrf.table[,2])
head(xrf.table[,4])
head(xrf.table)
test <- subset(ftir.table, Spectrum==fileframe[1,2]
)
head(test)
length(test[,1])
test2 <- subset(xrf.table, Spectrum=fileframe[1,1])
head(test2)
tail(test2)
head(test2[,3])
xrf.table[,] <- lapply(xrf.table, function(x) type.convert(as.character(x), as.is = TRUE))
test2 <- subset(xrf.table, Spectrum=fileframe[1,1])
tail(test2)
head(test2[,3])
test2 <- subset(xrf.table, Spectrum==fileframe[1,1])
tail(test2)
merge.list <- pbapply::pblapply(index, function(x) merge_spectra(ftir.data=subset(ftir.table, Spectrum==fileframe[x,2]), xrf.data=subset(xrf.table, Spectrum==fileframe[x,1]), energy.range=c(0,1)))
merged.spectra <- merge.list[[1]]
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
tail(merged.spectra)
merge.list <- pbapply::pblapply(index, function(x) merge_spectra(ftir.data=subset(ftir.table, Spectrum==fileframe[x,2]), xrf.data=subset(xrf.table, Spectrum==fileframe[x,1]), energy.range=c(0,10)))
merged.spectra <- merge.list[[1]]
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
merge.frame <- do.call("rbind", merge.list)
length(merge.frame[,1])
shiny::runApp("~/GitHub/eQuant")
manure57xrftrace <- csvFrame(filepath="/Users/lee/Dropbox/Documents/ICRAF/Calibration Folders/ICRAF 5i 900F4473 Cal/forCals/Manure Trace/TR-MA-057.CSV", filename="man57xrf")#
manure57xrflight <- csvFrame(filepath="/Users/lee/Dropbox/Documents/ICRAF/Calibration Folders/ICRAF 5i 900F4473 Cal/forCals/Manure Light/MAJ-MA-057.CSV", filename="man57xrf")#
manure57ftir <- readOpusData(filepath="/Users/lee/Dropbox/Documents/ICRAF/2018 Data/FTIR-XRF Comparison/Manure FTIR Data/ZnSe Alpha Spectra for 64 ICRAF Samples/MA-057.0", filename="man57ftir")#
#
merged.spectra <- merge_spectra(ftir.data=manure57ftir, xrf.data=manure57xrflight, energy.range=c(0, 10))#
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
merge_spectra <- function(ftir.data, xrf.data, energy.range){#
    ftir.data$Energy <- wave_to_eV(ftir.data$Wavenumber)#
    xrf.data$Wavenumber <- eV_to_wave(xrf.data$Energy)#
    colnames(ftir.data)[3] <- "CPS"#
    ftir.data$CPS <- ftir.data$CPS^5#
    xrf.subset <- subset(xrf.data, Energy > wave_to_eV(min(ftir.data$Wavenumber)))#
    merged.data <- rbind(ftir.data, xrf.subset)#
    subset(merged.data, Energy>=energy.range[1] & Energy<= energy.range[2])#
}
merged.spectra <- merge_spectra(ftir.data=manure57ftir, xrf.data=manure57xrflight, energy.range=c(0, 10))#
merged.plot <- ggplot(merged.spectra) +#
geom_line(aes(Energy, CPS)) +#
theme_light() +#
scale_x_log10() +#
scale_y_log10()#
merged.plot
wave_to_eV(400)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E/1e-9#
}#
#
eV_to_wave <- function(eV){#
    ((h*c)/eV)/1e-9#
}
wave_to_eV(400)
wave_to_eV(4000)
c <- 299792458#
h <- 4.1357-15#
v <- 1#
#
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E/1e-9#
}#
#
eV_to_wave <- function(eV){#
    ((h*c)/eV)/1e-9#
}
wave_to_eV(4000)
wave_to_eV(400)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
E}
wave_to_eV(400)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E*1e-9#
}
wave_to_eV(400)
h*c
c <- 299792458/1e-9
h*c
h <- 4.1357e-15
h*c
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E/1e-9#
}
wave_to_eV(400)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E#
}
wave_to_eV(400)
shiny::runApp("~/GitHub/eQuant")
eV_to_wave(3.1)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E#
}
wave_to_eV(400)
wave_to_eV <- function(wavelength){#
    v = c/wavelength#
    E = h*v#
    E/1e-9#
}
wave_to_eV(400)
shiny::runApp("~/GitHub/eQuant")
update.packages(ask=FALSE)
shiny::runApp("~/GitHub/eQuant")
update.packages(ask=FALSE)
shiny::runApp("~/GitHub/eQuant")
?merge
shiny::runApp("~/GitHub/eQuant")
?sprintf
shiny::runApp("~/GitHub/eQuant")
index <- make.names(sprintf("%04d", seq(1, 13, 1)))
index
shiny::runApp("~/GitHub/eQuant")
sprintf("%04d", 5)
shiny::runApp("~/GitHub/eQuant")
make.names(sprintf("%04d", 5))
shiny::runApp("~/GitHub/eQuant")
update.packages(ask=FALSE)
blank.frame <- data.frame(#
    Name=as.vector(as.character(rep("", 25))),#
    EnergyMin=as.numeric(rep("", 25)),#
    EnergyMax=as.numeric(rep("", 25)),#
    stringsAsFactors = FALSE#
    )
blank.frame
table <- blank.frame[complete.cases(blank.frame),]
table
length(table[,1])
shiny::runApp("~/GitHub/CloudCal")
test <- readRDS("~/Desktop/USDEarthCalTrainBetter.quant")
"Definitions" %in% ls(test)
"Spectra" %in% ls(test)
is.true("Definitions" %in% ls(test))
"Definitions" %in% ls(test) = FALSE
!"Definitions" %in% ls(test)
shiny::runApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/eQuant")
update.packages(ask=FALSE)
shiny::runApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/CloudCal-Training")
shiny::runApp("~/GitHub/eQuant")
shiny::runApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/CloudCal-Training")
shiny::runApp("~/GitHub/CloudCal")
rsconnect::deployApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/CloudCal")
test <- readRDS("~/Dropbox/Documents/CloudCal Evaluation/Quant Files/machine900F4197Obsidian.quant")
concentration.table <- test[["Values"]]
concentration.table <- concentration.table[complete.cases(concentration.table[,input$calcurveelement]),]
concentration.table <- concentration.table[complete.cases(concentration.table[,"Cl.K.alpha"]),]
length(concentration.table[,1])
concentration.table[] <- lapply(concentration.table, function(x){replace(x, x == 0, NA)}
)
concentration.table <- concentration.table[complete.cases(concentration.table[,"Cl.K.alpha"]),]
length(concentration.table[,1])
spectra.line.table <- test[["Intensities"]]
spectra.line.table <- spectra.line.table[complete.cases(concentration.table[, "Cl.K.alpha"]),]
length(spectra.line.table[,1])
concentration.table$Spectrum
spectra.line.table <- spectra.line.table[spectra.line.table$Spectrum %in% concentration.table$Spectrum, ]
length(spectra.line.table[,1])
concentration.table <- test[["Values"]]
concentration.table[] <- lapply(concentration.table, function(x){replace(x, x == 0, NA)})
spectra.line.table <- test[["Intensities"]]
spectra.line.table$Spectrum <- concentration.table$Spectrum
concentration.table <- concentration.table[complete.cases(concentration.table[,"Cl.K.alpha"]),]
spectra.line.table <- spectra.line.table[spectra.line.table$Spectrum %in% concentration.table$Spectrum, ]
length(spectra.line.table[,1])
update.packages(ask=FALSE)
shiny::runApp("~/GitHub/CloudCal")
x <- c(3, 4, 5)
y <- c(7, 2, 5)
xummary(lm(y~x))
xy.lm <- lm(y~x)
summary(xy.lm)
summary(xy.lm)$coef
summary(xy.lm)$coef[1]
summary(xy.lm)$coef[0]
summary(xy.lm)$coef[2]
x <- 1
x <- c(3, 4, 8, 5, 2)
a <- 1
Closest(x, a, which=TRUE)
install.packages("DescTools")
library(DescTools)
Closest(x, a, which=TRUE)
shiny::runApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/eQuant")
update.packages(ask=FALSE)
x <- c(1, 2, 3, 4, 5)
Closest(x, 1, which=TRUE)
DescTools::Closest(x, 1, which=TRUE)
DescTools::Closest(x, 1)
library(DescTools)
?Closest
?order
?sort
x <- c(4, 3, 6, 3)
y <- c(7, 4, 7, 2)
test.lm <- summary(lm(y~x))
test.lm
test.lm$r.squared
shiny::runApp("~/GitHub/CloudCal")
update.packages(ask=FALSE)
x <- c(5, 2, 1, 7, 2)
y <- c(7, 5, 2, 7, 9)
summary(lm(y~x))
summary(lm(y~x))$coef
summary(lm(y~x))$coef[2]
test.lm <- lm(y~x)
predict(test.lm, newdata=c(1, 2, 3, 4, 5))
predict(test.lm, newdata=data.frame(c(1, 2, 3, 4, 5)))
predict(test.lm, newdata=data.frame(c(1, 2, 3, 4, 5)), interval='confidence')
predict(test.lm, newdata=data.frame(c(1, 2, 3, 4, 5)), interval='confidence')$fit
predict(test.lm, newdata=data.frame(c(1, 2, 3, 4, 5)), interval='confidence')[,'fit']
sumary(test.lm)
test.lm$r.squared
summary(test.lm)$r.squared
summary(test.lm)$adj.r.squared
library(DescTools)
?Closest
?predict
?predict.lm
lm_eqn_val = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}
lm_eqn_val(test.lm)
eq <- lm_eqn_val(test.lm)
eq2 <- gsub("c", "", eq)
eq2 <- gsub("c()", "", eq)
eq2 <- gsub("c(", "", eq)
eq2 <- gsub('c(', "", eq)
eq2 <- gsub("c(", "", eq)
eq2 <- gsub("c(", "", eq)   eq <- gsub("^c\\(|\\)$", "", eq)
eq <- gsub("^c\\(|\\)$", "", eq)
eq
as.character(as.expression(eq))
shiny::runApp("~/GitHub/CloudCal")
x=c("a", "b", "c")#
y=list(c(1,2,3), c("f","g"), c(1,"r","$"))#
df = as.data.frame(x)#
df$y = y#
p = sprintf('{"name":"%s", "import": [%s]}', df$x, df$y)#
p <- gsub("\\[c\\("," \\[",p)#
p <- gsub("\\)\\]","\\]",p)
p
shiny::runApp("~/GitHub/CloudCal")
m <- test.lm
m
l <- list(a = format(coef(m)[1], digits = 2),
l
)
l <- list(a = format(coef(m)[1], digits = 2)
)
l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3))
l
eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)
eq
?substitute
as.character(as.expression(eq))
test <- as.character(as.expression(eq))
test
gsub("\\c\\(", "", test)
shiny::runApp("~/GitHub/CloudCal")
update.packages(ask=FALSE)
?pdf
?tif
?tiff
test <- readRDS("~/Dropbox/Documents/University of West Virginia/Moisture_Manure samples/quant data/yadavWater.quant")
ls(test)
test <- readRDS("~/Dropbox/Documents/University of West Virginia/Moisture_Manure samples/quant data/yadavWater.quant")
ls(test)
test$Definitions
shiny::runApp("~/GitHub/CloudCal")
update.packages(ask=FALSE)
shiny::runApp("~/GitHub/CloudCal")
?nearPoints
update.packages(ask=FALSE)
options("device")
shiny::runApp("~/GitHub/CloudCal", display.mode="showcase")
shiny::runApp("~/GitHub/CloudCal")
install_version("ggplot2", version = "2.2.1", repos = "http://cran.us.r-project.org", checkBuilt=TRUE)
devtools::install_version("ggplot2", version = "2.2.1", repos = "http://cran.us.r-project.org", checkBuilt=TRUE)
shiny::runApp("~/GitHub/CloudCal")
shiny::runApp("~/GitHub/CloudCal-Training")
shiny::runApp("~/GitHub/CloudCal-Training")
